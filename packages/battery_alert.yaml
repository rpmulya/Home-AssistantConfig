################################################################
## Packages / Battery Alert
################################################################

################################################################
## Changelog
################################################################
##
## 1.0.0 (2018-02-14)
##   Added
##   - Added version number to enable better tracking
##
## 1.0.1 (2018-02-15)
##   Added
##   - Added battery_sensor_creation_disabled attibute to skip
##     creating a battery sensor even when an battery attribute
##     exists.
##
## 1.0.2 (2018-04-06)
##   Added
##   - Added battery icon to sensors.
##
## 1.0.3 (2018-05-10)
##   Changed
##   - Change device_class to battery and remove icon, which
##     allows dynamic icons in 0.69.
##
## 1.0.4 (2018-05-11)
##   Changed
##   - Fixed condition battery_sensor_creation_disabled condition
##   Added
##   - Documented a jinja template that can be use to assist
##     with creating a group containing all battery sensors.
##
## 1.0.5 (2018-05-14)
##   Changed
##   - Changed formatting of notifications to improve readability
##   - Nofity via bot immediately when thresholds are modified
##   Added
##   - Entities with device_class of battery no longer need
##     battery in their friendly name to be monitored
##   - Don't create a battery sensor from an entity if
##     device_class is battery
##
## 1.0.6 (2018-05-14)
##   Changed
##   - Added object_id to notifications
##   - Updated Battery Status group jinja code to check for
##     battery device_class
##
## 1.0.7 (2018-05-16)
##   Added
##   - Added unique_id to disambiguate sensors with duplicate
##     names
##   - Added source info to mqtt config topic
##   - Consider friendly names and entity_ids that end with _bat
##     as a battery sensor (needed for rflink battery sensors)
##   - Consider entities with icon of battery, battery-alert, or
##     battery-unknown as a battery sensor regardles of its name
##   - Consider entity_ids containing battery as a battery sensor
##   Changed
##   - Reduce code duplication using yaml anchors and references
##   - Changed MQTT topic to be based on entity_id
##   - Improve method of filtering non-battery devices that have
##     battery in their name. Detection is now based on icon
##     rather than keywords.
##
## 1.0.8 (2018-06-01)
##   Added
##   - Add support for defining battery_template attibute to
##     allow manipulation of value of battery sensor
##   - Support battery attributes that contain strings
##   Removed
##   - Cleaned up notifications by removing object id
##
################################################################

################################################################
## Install Instructions
################################################################
##
##  1. Enable MQTT using your preferred MQTT broker
##     https://home-assistant.io/components/mqtt/
##
##  2. Enable MQTT Discovery by adding `discovery: true` and
##     `discovery_prefix: homeassistant` under the `mqtt:` section
##     of your configuration.yaml
##
##     mqtt:
##       discovery: true
##       discovery_prefix: homeassistant
##
##  3. Save this file as CONFIGDIR/packages/battery_alert.yaml
##
##  4. Add `packages: !include_dir_named packages` under the
##     `homeassistant:` section of your configuration.yaml
##
##     homeassistant:
##       packages: !include_dir_named packages
##
##  5. Restart Home Assistant
##
##  6. Adjust Min Alert Threshold slider to the minimum battery
##     level to alert on.  Note: the input slider requires the
##     recorder component to keep it's state through restarts.
##     If recorder is not enabled, the threshold can be set by
##     un-remarking `initial` and setting the preferred default.
##
##  7. Adjust Max Alert Threshold slider to the maximum battery
##     level to alert on.  Note: the input slider requires the
##     recorder component to keep it's state through restarts.
##     If recorder is not enabled, the threshold can be set by
##     un-remarking `initial` and setting the preferred default.
##
##  8. To disable alerts for a specific entity, use customize to
##     set `battery_alert_disabled` to `true`
##
##     homeassistant:
##       customize:
##         sensor.sensor_name_to_ignore_battery:
##           battery_alert_disabled: true
##
##  9. To disable creating a sensor from battery attributes for a specific entity, use customize to
##     set `battery_sensor_creation_disabled` to `true`
##
##     homeassistant:
##       customize:
##         sensor.sensor_with_battery_attibute:
##           battery_sensor_creation_disabled: true
##
## 10. If a battery attribute requires a template to convert it into a usable percent
##     or string, use customize to add `battery_template` with the necessary template.
##     The template should result in either a percentage or a string ("Low" will
##     trigger low battery notification).
##
##     This example will create a battery sensor with the value of battery_level * 2
##
##     homeassistant:
##       customize:
##         sensor.sensor_with_battery_attibute_template:
##           battery_template: "{{ value | int * 2 }}"
##
##     This example will create a battery sensor that contains "Low" if battery_level
##     is less than 2
##
##     homeassistant:
##       customize:
##         sensor.sensor_with_battery_attibute_template:
##           battery_template: >-
##             {%- if value < 2 -%}
##             "Low"
##             {%- else -%}
##             "Full"
##             {%- endif -%}
##
## 11. The jinja template below can be used to simplify creation of a group containing battery sensors.
##     Navigate to the /dev-template page then paste the template code below into the editor section.
##     The right hand side will have the yaml needed to create a group that contains all of your
##     battery sensors, which you can just copy/paste into your group config.
##
##     battery_status:
##       name: Battery Status
##       icon: mdi:battery-charging
##       entities:
##     {%- for item in states.sensor if (
##       (
##         not is_state_attr(item.entity_id, 'battery_alert_disabled', true)
##       ) and (
##         is_state_attr(item.entity_id, 'device_class', 'battery')
##         ) or (
##           is_state_attr(item.entity_id, 'icon', 'mdi:battery')
##         ) or (
##           is_state_attr(item.entity_id, 'icon', 'mdi:battery-alert')
##         ) or (
##           is_state_attr(item.entity_id, 'icon', 'mdi:battery-unknown')
##         ) or (
##           'battery' in item.entity_id | lower
##           and item.attributes.icon is defined
##           and 'battery' in item.attributes.icon | lower
##         ) or (
##           'battery' in item.name | lower
##           and item.attributes.icon is defined
##           and 'battery' in item.attributes.icon | lower
##         ) or (
##           (item.entity_id | lower).endswith('_bat')
##         ) or (
##           (item.name | lower).endswith('_bat')
##         )
##       ) %}
##         - {{ item.entity_id }}
##     {%- endfor -%}
##
################################################################

################################################
## Customize
################################################

homeassistant:
  customize:
    ################################################
    ## Node Anchors
    ################################################

    package.node_anchors:
      customize: &customize
        package: 'battery_alert'

    ################################################
    ## Group
    ################################################

    group.battery_alert:
      <<: *customize
      friendly_name: "Battery Alert"
      icon: mdi:steam

    ################################################
    ## Automation
    ################################################

    automation.battery_notification:
      <<: *customize
      friendly_name: "Battery Notification"
      icon: mdi:comment-alert-outline

    automation.battery_notification_clear:
      <<: *customize
      friendly_name: "Battery Notification Clear"
      icon: mdi:comment-remove-outline

    automation.battery_notification_bot:
      <<: *customize
      friendly_name: "Battery Notification Bot"
      icon: mdi:comment-alert-outline

    automation.battery_sensor_from_battery_level_attribute:
      <<: *customize
      friendly_name: "Battery Sensor from battery_level Attribute"
      icon: mdi:battery-charging-wireless-outline

    automation.battery_sensor_from_battery_attribute:
      <<: *customize
      friendly_name: "Battery Sensor from battery Attribute"
      icon: mdi:battery-charging-wireless-outline

    automation.battery_sensor_from_battery_numeric_attribute:
      <<: *customize
      friendly_name: "Battery Sensor from battery numeric Attribute"
      icon: mdi:battery-charging-wireless-outline

################################################
## Group
################################################

group:
  battery_alert:
    control: hidden
    entities:
      - input_number.battery_alert_threshold_min
      - input_number.battery_alert_threshold_max
      - automation.battery_notification
      - automation.battery_notification_clear
      - automation.battery_notification_bot
      - automation.battery_sensor_from_battery_level_attribute
      - automation.battery_sensor_from_battery_attribute
      - automation.battery_sensor_from_battery_numeric_attribute

################################################
## Input Number
################################################

input_number:
  battery_alert_threshold_max:
    name: "Max Alert Threshold"
    icon: mdi:arrow-collapse-up
    mode: slider
    min: -1
    max: 100
    # initial: 40

  battery_alert_threshold_min:
    name: "Min Alert Threshold"
    icon: mdi:arrow-collapse-down
    mode: slider
    min: -1
    max: 100
    # initial: -1

################################################
## Automation
################################################

automation:
- alias: battery_notification
  trigger:
    - platform: time
      minutes: '/15'
      seconds: 00
    - platform: state
      entity_id:
        - input_number.battery_alert_threshold_min
        - input_number.battery_alert_threshold_max
  condition:
    - condition: template
      value_template: "{{ not is_state('persistent_notification.low_battery_alert', 'notifying') }}"
  action:
    - condition: template
      value_template: &low_battery_check >
        {% macro battery_level() %}
        {%- for item in states.sensor if (
          (
            not is_state_attr(item.entity_id, 'battery_alert_disabled', true)
          ) and (
            is_state_attr(item.entity_id, 'device_class', 'battery')
            ) or (
              is_state_attr(item.entity_id, 'icon', 'mdi:battery')
            ) or (
              is_state_attr(item.entity_id, 'icon', 'mdi:battery-alert')
            ) or (
              is_state_attr(item.entity_id, 'icon', 'mdi:battery-unknown')
            ) or (
              'battery' in item.entity_id | lower
              and item.attributes.icon is defined
              and 'battery' in item.attributes.icon | lower
            ) or (
              'battery' in item.name | lower
              and item.attributes.icon is defined
              and 'battery' in item.attributes.icon | lower
            ) or (
              (item.entity_id | lower).endswith('_bat')
            ) or (
              (item.name | lower).endswith('_bat')
            )
          ) and (
            (
              (
                item.state is number
                or item.state | length == item.state | int | string | length
                or item.state | length == item.state | float | string | length
              )
              and item.state | int < states.input_number.battery_alert_threshold_max.state | int
              and item.state | int > states.input_number.battery_alert_threshold_min.state | int
            )
            or item.state | lower == 'low'
            or item.state | lower == 'unknown'
          ) -%}
          {{ item.name }} ({{ item.state }})
        {% endfor -%}
        {% endmacro %}
        {{ battery_level() | trim != "" }}
    - service: persistent_notification.create
      data_template:
        title: "Low Battery levels"
        notification_id: low_battery_alert
        message: &message >
          {% macro battery_level() %}
          {%- for item in states.sensor if (
            (
              not is_state_attr(item.entity_id, 'battery_alert_disabled', true)
            ) and (
              is_state_attr(item.entity_id, 'device_class', 'battery')
              ) or (
                is_state_attr(item.entity_id, 'icon', 'mdi:battery')
              ) or (
                is_state_attr(item.entity_id, 'icon', 'mdi:battery-alert')
              ) or (
                is_state_attr(item.entity_id, 'icon', 'mdi:battery-unknown')
              ) or (
                'battery' in item.entity_id | lower
                and item.attributes.icon is defined
                and 'battery' in item.attributes.icon | lower
              ) or (
                'battery' in item.name | lower
                and item.attributes.icon is defined
                and 'battery' in item.attributes.icon | lower
              ) or (
                (item.entity_id | lower).endswith('_bat')
              ) or (
                (item.name | lower).endswith('_bat')
              )
            ) and (
              (
                (
                  item.state is number
                  or item.state | length == item.state | int | string | length
                  or item.state | length == item.state | float | string | length
                )
                and item.state | int < states.input_number.battery_alert_threshold_max.state | int
                and item.state | int > states.input_number.battery_alert_threshold_min.state | int
              )
              or item.state | lower == 'low'
              or item.state | lower == 'unknown'
            ) -%}
            {{ item.name }} ({{ item.state }})
          {% endfor -%}
          {% endmacro %}
          {{ battery_level() }}

- alias: battery_notification_clear
  trigger:
    - platform: time
      minutes: '/15'
      seconds: 00
    - platform: state
      entity_id:
        - input_number.battery_alert_threshold_min
        - input_number.battery_alert_threshold_max
  action:
    - condition: template
      value_template: &low_battery_clear >
        {% macro battery_level() %}
        {%- for item in states.sensor if (
          (
            not is_state_attr(item.entity_id, 'battery_alert_disabled', true)
          ) and (
            is_state_attr(item.entity_id, 'device_class', 'battery')
            ) or (
              is_state_attr(item.entity_id, 'icon', 'mdi:battery')
            ) or (
              is_state_attr(item.entity_id, 'icon', 'mdi:battery-alert')
            ) or (
              is_state_attr(item.entity_id, 'icon', 'mdi:battery-unknown')
            ) or (
              'battery' in item.entity_id | lower
              and item.attributes.icon is defined
              and 'battery' in item.attributes.icon | lower
            ) or (
              'battery' in item.name | lower
              and item.attributes.icon is defined
              and 'battery' in item.attributes.icon | lower
            ) or (
              (item.entity_id | lower).endswith('_bat')
            ) or (
              (item.name | lower).endswith('_bat')
            )
          ) and (
            (
              (
                item.state is number
                or item.state | length == item.state | int | string | length
                or item.state | length == item.state | float | string | length
              )
              and item.state | int < states.input_number.battery_alert_threshold_max.state | int
              and item.state | int > states.input_number.battery_alert_threshold_min.state | int
            )
            or item.state | lower == 'low'
            or item.state | lower == 'unknown'
          ) -%}
          {{ item.name }} ({{ item.state }})
        {% endfor -%}
        {% endmacro %}
        {{ battery_level() | trim == "" }}
    - service: persistent_notification.dismiss
      data:
        notification_id: low_battery_alert

- alias: battery_notification_bot
  trigger:
    - platform: time
      at: '10:00:00'
    - platform: time
      at: '18:00:00'
    - platform: state
      entity_id:
        - input_number.battery_alert_threshold_min
        - input_number.battery_alert_threshold_max
  action:
    - condition: template
      value_template: *low_battery_check
    - service: notify.notifyRPM
      data_template:
        title: "These devices have low battery levels"
        message: *message

- alias: battery_sensor_from_battery_level_attribute
  trigger:
    - platform: event
      event_type: state_changed
  condition:
    - condition: template
      value_template: "{{ trigger.event.data is not none }}"
    - condition: template
      value_template: "{{ trigger.event.data.new_state is not none }}"
    - condition: template
      value_template: "{{ trigger.event.data.new_state.attributes is not none }}"
    - condition: template
      value_template: "{{ trigger.event.data.old_state is not none }}"
    - condition: template
      value_template: "{{ trigger.event.data.new_state.attributes.battery_level is defined }}"
    - condition: template
      value_template: "{{ 'battery' not in trigger.event.data.new_state.name | lower }}"
    - condition: template
      value_template: "{{ not is_state_attr(trigger.event.data.entity_id, 'device_class', 'battery') }}"
    - condition: template
      value_template: "{{ not is_state_attr(trigger.event.data.entity_id, 'battery_sensor_creation_disabled', true) }}"
  action:
    - service: mqtt.publish
      data_template:
        topic: "homeassistant/sensor/{{ trigger.event.data.entity_id.split('.')[1] }}_battery/config"
        retain: true
        payload: &config_payload >-
          {
            "device_class": "battery",
            "name": "{{ trigger.event.data.new_state.name }} Battery",
            "state_topic": "homeassistant/sensor/{{ trigger.event.data.entity_id.split('.')[1] }}_battery/state",
            "unit_of_measurement": "%",
            {% if trigger.event.data.new_state.attributes.battery_template is defined -%}
            "value_template": "{{ trigger.event.data.new_state.attributes.battery_template }}",
            {%- endif %}
            "unique_id": "{{ trigger.event.data.entity_id.split('.')[1] }}_battery",
            "source_entity_id": "{{ trigger.event.data.entity_id }}",
            {% if trigger.event.data.new_state.attributes.battery_level is defined -%}
            "source_attribute": "battery_level"
            {%- elif trigger.event.data.new_state.attributes.battery is defined -%}
            "source_attribute": "battery"
            {%- elif trigger.event.data.new_state.attributes['Battery numeric'] is defined -%}
            "source_attribute": "Battery numeric"
            {%- else -%}
            "source_attribute": "unknown"
            {%- endif %}
          }
    - service: mqtt.publish
      data_template:
        topic: "homeassistant/sensor/{{ trigger.event.data.entity_id.split('.')[1] }}_battery/state"
        retain: true
        payload: >-
          {%- set attrib = trigger.event.data.new_state.attributes.battery_level -%}
          {%- if attrib is number
              or attrib | length == attrib | int | string | length
              or attrib | length == attrib | float | string | length
          -%}
            {{ attrib | int }}
          {%- else -%}
            {{ attrib }}
          {%- endif -%}

- alias: battery_sensor_from_battery_attribute
  trigger:
    - platform: event
      event_type: state_changed
  condition:
    - condition: template
      value_template: "{{ trigger.event.data is not none }}"
    - condition: template
      value_template: "{{ trigger.event.data.new_state is not none }}"
    - condition: template
      value_template: "{{ trigger.event.data.new_state.attributes is not none }}"
    - condition: template
      value_template: "{{ trigger.event.data.old_state is not none }}"
    - condition: template
      value_template: "{{ trigger.event.data.new_state.attributes.battery is defined }}"
    - condition: template
      value_template: "{{ 'battery' not in trigger.event.data.new_state.name | lower }}"
    - condition: template
      value_template: "{{ not is_state_attr(trigger.event.data.entity_id, 'device_class', 'battery') }}"
    - condition: template
      value_template: "{{ not is_state_attr(trigger.event.data.entity_id, 'battery_sensor_creation_disabled', true) }}"
  action:
    - service: mqtt.publish
      data_template:
        topic: "homeassistant/sensor/{{ trigger.event.data.entity_id.split('.')[1] }}_battery/config"
        retain: true
        payload: *config_payload
    - service: mqtt.publish
      data_template:
        topic: "homeassistant/sensor/{{ trigger.event.data.entity_id.split('.')[1] }}_battery/state"
        retain: true
        payload: >-
          {%- set attrib = trigger.event.data.new_state.attributes.battery -%}
          {%- if attrib is number
              or attrib | length == attrib | int | string | length
              or attrib | length == attrib | float | string | length
          -%}
            {{ attrib | int }}
          {%- else -%}
            {{ attrib }}
          {%- endif -%}

- alias: battery_sensor_from_battery_numeric_attribute
  trigger:
    - platform: event
      event_type: state_changed
  condition:
    - condition: template
      value_template: "{{ trigger.event.data is not none }}"
    - condition: template
      value_template: "{{ trigger.event.data.new_state is not none }}"
    - condition: template
      value_template: "{{ trigger.event.data.new_state.attributes is not none }}"
    - condition: template
      value_template: "{{ trigger.event.data.old_state is not none }}"
    - condition: template
      value_template: "{{ trigger.event.data.new_state.attributes['Battery numeric'] is defined }}"
    - condition: template
      value_template: "{{ 'battery' not in trigger.event.data.new_state.name | lower }}"
    - condition: template
      value_template: "{{ not is_state_attr(trigger.event.data.entity_id, 'device_class', 'battery') }}"
    - condition: template
      value_template: "{{ not is_state_attr(trigger.event.data.entity_id, 'battery_sensor_creation_disabled', true) }}"
  action:
    - service: mqtt.publish
      data_template:
        topic: "homeassistant/sensor/{{ trigger.event.data.entity_id.split('.')[1] }}_battery/config"
        retain: true
        payload: *config_payload
    - service: mqtt.publish
      data_template:
        topic: "homeassistant/sensor/{{ trigger.event.data.entity_id.split('.')[1] }}_battery/state"
        retain: true
        payload: "{{ (trigger.event.data.new_state.attributes['Battery numeric'] | int + 1) * 10 }}"